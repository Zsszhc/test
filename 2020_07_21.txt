1、一行代码实现1--100之和
sun = sum(range(1, 101))
2、如何在一个函数内部修改全局变量
修改该变量指向
a = 5
def test():
	global a
	a = 11
	print(a)
不修改变量指向，使用列表索引
a = [5, 10]
def test():
    a.insert(0, 2)
    a.append(12)
    a.insert(3, 11)
    print(a)
test()

3、列出5个python标准库

os:提供了不少与操作系统相关联的函数库
sys:通常用于命令行参数的库
random:用于生成随机数的
math:库提供了数学常数和数学函数
datetime:日期和时间的操作库

4、字典如何删除键和合并两个字典

# test_dict = {'a': '1', 'b': '2', 'c': '3'}
# test_dict1 = test_dict.copy()
# test_dict2 = {}
# test_dict2.update(test_dict)
# print(test_dict, test_dict1, test_dict2)
# #直接清空
# test_dict1.clear()
# print(test_dict1)
# #删除指定的键值对并返回值
# dictTest = test_dict.pop('a')
# print(dictTest)
# #随机删除一个键值对并返回
# dictTest = test_dict.popitem()
# print(dictTest)
# #删除指定的键值对或者清空
# del test_dict['b']
# del test_dict
# print(test_dict) 这里会返回一个NameError: name 'test_dict' is not defined，是因为这个列表已经被从内存中删除
-------------上面是如何删除键，下面是如何合并字典--------------------------------------------------------------------------------
# d1 = {'user': 'root', 'pwd': '1234'}
# d2 = {'ip': '127.0.0.1', 'port': '8080'}
(1)
# d3 = dict(d1.items() + d2.items())
# Class 'ItemsView' does not define '__add__', so the '+' operator cannot be used on its instances
# d3 = {}
# d3.update(d1)
# d3.update(d2)
# print(d3)
(2)
# def test(dd, ds):
#     d3 = dd.copy()
#     d3.update(ds)
#     return d3
(3)
# d3 = dict(d1, **d2)
# print(d3)
(4)
# d3 = {}
# for k, v in d1.items():
#     d3[k] = v
# for k1, v1 in d2.items():
#     d3[k1] = v1
# print(d3)
# print(test(d1, d2))

5、谈下python的GIL

GIL是什么
	GIL的全称是 Global Interpreter Lock，全局解释器锁。之所以叫这个名字，是因为Python的执行依赖于解释器。
	
GIL为什么会出现
	为了解决多线程之间数据完整性和状态同步的问题，设计为在任意时刻只有一个线程在解释器中运行。
	因为CPython中一开始就使用GIL的设计理念，并且很多Package依赖于CPython甚至依赖于GIL。因此造成尾大不掉，实际上是个历史问题。
	而当执行多线程程序时，由GIL来控制同一时刻只有一个线程能够运行。
	即Python中的多线程是表面多线程，也可以理解为fake多线程，不是真正的多线程。
	为了Python解释器中原子操作的线程安全。
	
GIL的优缺点
	GIL可以保证我们在多线程编程时，无需考虑多线程之间数据完整性和状态同步的问题。
	我们的多线程程序执行起来是“并发”，而不是“并行”。因此执行效率会很低，会不如单线程的执行效率。
	
如何避免GIL带来的影响
	用multiprocess（多进程）替代Thread
	multiprocess每个进程有自己的独立的GIL，因此也不会出现进程之间的GIL争抢。
	但是multiprocess的引入会增加程序实现时线程间数据通讯和同步的困难。
	也可以更换解释器，但是并不推荐这样做。
	或者使用互斥锁。

GIL分析总结
	因为GIL的存在，只有IO Bound场景下得多线程会得到较好的性能
	如果对并行计算性能较高的程序可以考虑把核心部分也成C模块，或者索性用其他语言实现
	在Python编程中，如果想利用计算机的多核提高程序执行效率，用多进程代替多线程
	即使有GIL存在，由于GIL只保护Python解释器的状态，所以对于非原子操作，在Python进行多线程编程时也需要使用互斥锁（如thread中的lock）保证线程安全。
	GIL在较长一段时间内将会继续存在，但是会不断对其进行改进
